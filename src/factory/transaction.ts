/**
 * transaction factory
 * 取引ファクトリー
 * @namespace transaction
 */

import * as validator from 'validator';

import ArgumentError from './error/argument';
import ArgumentNullError from './error/argumentNull';

import { IExtendId } from './autoGenerated';
import TransactionStatusType from './transactionStatusType';
import TransactionTasksExportationStatus from './transactionTasksExportationStatus';
import TransactionType from './transactionType';

export type ITransaction = IExtendId<IAttributes>;

/**
 * transaction interface
 * 取引インターフェース
 * @export
 * @interface
 * @memberof transaction
 */
export interface IAttributes {
    /**
     * 取引タイプ
     */
    typeOf: TransactionType;
    /**
     * 取引状態
     */
    status: TransactionStatusType;
    /**
     * 取引主体
     */
    agent: any;
    /**
     * 取引結果
     */
    result?: any;
    /**
     * 取引エラー
     */
    error?: any;
    /**
     * 取引対象
     */
    object?: any;
    /**
     * 取引進行期限
     */
    expires: Date;
    /**
     * 取引開始日時
     */
    startDate?: Date;
    /**
     * 取引終了日時
     */
    endDate?: Date;
    /**
     * タスクエクスポート日時
     */
    tasksExportedAt?: Date;
    /**
     * タスクエクスポート状態
     */
    tasksExportationStatus: TransactionTasksExportationStatus;
}

/**
 * 取引を作成する
 * @export
 * @function
 * @returns {IAttributes} 取引属性
 * @memberof transaction
 */
export function createAttributes(params: {
    typeOf: TransactionType;
    status: TransactionStatusType;
    agent: any;
    result?: any;
    error?: any;
    object?: any;
    expires: Date;
    startDate?: Date;
    endDate?: Date;
    tasksExportedAt?: Date;
    tasksExportationStatus: TransactionTasksExportationStatus;
}): IAttributes {
    if (typeof params.status !== 'string' || validator.isEmpty(params.status)) {
        throw new ArgumentNullError('status');
    }
    if (typeof params.tasksExportationStatus !== 'string' || validator.isEmpty(params.tasksExportationStatus)) {
        throw new ArgumentNullError('tasksExportationStatus');
    }
    if (!(params.expires instanceof Date)) {
        throw new ArgumentError('expires', 'expires must be Date.');
    }
    if (params.startDate !== undefined && !(params.startDate instanceof Date)) {
        throw new ArgumentError('startDate', 'startDate must be Date.');
    }
    if (params.endDate !== undefined && !(params.endDate instanceof Date)) {
        throw new ArgumentError('endDate', 'endDate must be Date.');
    }
    if (params.tasksExportedAt !== undefined && !(params.tasksExportedAt instanceof Date)) {
        throw new ArgumentError('tasksExportedAt', 'tasksExportedAt must be Date.');
    }

    return {
        typeOf: params.typeOf,
        status: params.status,
        agent: params.agent,
        result: params.result,
        error: params.error,
        object: params.object,
        expires: params.expires,
        startDate: params.startDate,
        endDate: params.endDate,
        tasksExportedAt: params.tasksExportedAt,
        tasksExportationStatus: params.tasksExportationStatus
    };
}
