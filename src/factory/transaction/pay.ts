/**
 * 支払取引ファクトリー
 * @namespace transaction.pay
 */

import { IAction as IPayAction } from '../action/trade/pay';
import { IExtendId } from '../autoGenerated';
import { IClientUser } from '../clientUser';
import OrganizationType from '../organizationType';
import PersonType from '../personType';
import * as TransactionFactory from '../transaction';
import TransactionStatusType from '../transactionStatusType';
import TransactionTasksExportationStatus from '../transactionTasksExportationStatus';
import TransactionType from '../transactionType';

export interface IRecipient {
    typeOf: OrganizationType | PersonType;
    id: string;
    name: string;
    url: string;
}

export interface IAgent {
    typeOf: OrganizationType | PersonType;
    id: string;
    name: string;
    url: string;
}

export interface IResult {
    payAction: IPayAction;
}

/**
 * error interface
 * エラーインターフェース
 * @export
 * @interface
 * @memberof transaction.pay
 */
export type IError = any;

/**
 * object of a transaction interface
 * 取引対象物インターフェース
 * @export
 * @interface
 * @memberof transaction.placeOrder
 */
export interface IObject {
    clientUser: IClientUser;
    price: number;
    accountId: string;
    notes: string;
}

export type ITransaction = IExtendId<IAttributes>;

/**
 * place order transaction interface
 * 注文取引インターフェース
 * @export
 * @interface
 * @memberof transaction.placeOrder
 */
export interface IAttributes extends TransactionFactory.IAttributes {
    /**
     * 購入者
     */
    agent: IAgent;
    /**
     * 販売者
     */
    recipient: IRecipient;
    /**
     * 取引の結果発生するもの
     */
    result?: IResult;
    /**
     * 取引に関するエラー
     */
    error?: IError;
    /**
     * 取引の対象物
     * 座席仮予約、クレジットカードのオーソリなど、取引を構成する承認などが含まれます。
     */
    object: IObject;
}

/**
 * create placeOrderTransaction object.
 * 注文取引オブジェクトを生成する。
 * @export
 * @function
 * @memberof transaction.placeOrder
 */
export function createAttributes(params: {
    status: TransactionStatusType;
    agent: IAgent;
    recipient: IRecipient;
    result?: IResult;
    error?: IError;
    object: IObject;
    expires: Date;
    startDate?: Date;
    endDate?: Date;
    tasksExportedAt?: Date;
    tasksExportationStatus: TransactionTasksExportationStatus;
}): IAttributes {
    return {
        ...TransactionFactory.createAttributes({
            typeOf: TransactionType.Pay,
            status: params.status,
            agent: params.agent,
            result: params.result,
            error: params.error,
            object: params.object,
            expires: params.expires,
            startDate: params.startDate,
            endDate: params.endDate,
            tasksExportedAt: params.tasksExportedAt,
            tasksExportationStatus: params.tasksExportationStatus
        }),
        ...{
            recipient: params.recipient,
            object: params.object
        }
    };
}
